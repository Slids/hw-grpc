;; Implement a gRPC server for Hellow World.

(defpackage #:grpc-server
  (:use #:cl)
  (:local-nicknames
   (#:hello-rpc #:cl-protobufs.hello-rpc)
   (#:hello #:cl-protobufs.hello)))

(in-package #:grpc-server)

;; A defgeneric is generated by protoc from the SayHello
;; rpc line inside of the HellowWorld service in hello.proto.
(defmethod hello-rpc:say-hello ((request hello:hello-request) rpc)
  ;; The RPC contains useful data for more intricate requests.
  (declare (ignore rpc))
  (hello:make-hello-reply
   :message (concatenate 'string "Hello " (hello:hello-request.name request))))

(defconstant +hostname+ "127.0.0.1" "Hostname for our server.")
(defconstant +port-number+ "8080" "Port for our server.")

(defun main ()
  ;; Before we use gRPC we need to init-grpc, this sets up
  ;; low-level gRPC internals.
  (grpc:init-grpc)
  ;; This starts the server.
  (grpc::run-grpc-proto-server
   (concatenate 'string
		+hostname+ ":"
		+port-number+)
   'hello:hello-world))
